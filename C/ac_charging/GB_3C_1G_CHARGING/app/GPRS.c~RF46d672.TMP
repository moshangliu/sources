
/**********************************************************
德和新能源科技有限公司
File name:  hwtst.c	              // 文件名
Author:     韩忠华                   // 作者
Version:    v1.00                   // 版本信息
Date:       2015-1-13              // 完成日期
Description:  	              // 使用232串口与GPRS模块通信，间接实现与综合平台的通信
Others:		              // 
Function List:	              //
History:                        //
**********************************************************/

#include "board.h"
#include "Dio.h"
#include "uart.h"
#include "globals.h"
#include "string.h"

extern uint8_t GetAnalogSta(void);
extern PARACONFIG g_sParaConfig;
extern UART_BUFF RS232Rx, RS232Tx;
uint32_t begin_CurKwh, end_CurKwh;
extern uint32_t CurKwh;
extern uint8_t SOC;
uint8_t server_stop,server_begin;
uint16_t output_vol, output_cur;
user_info t_user_info, r_user_info;
uint8_t Dev_Status = 0, Dev_Error;    //设备状态，设备故障
uint32_t HeartbeatCnt;  //心跳计时
uint32_t InfoCnt;  //数据上传计时
uint32_t communication_delay;  //通信超时
uint8_t communication_state; //通信状态
uint8_t sys_year,sys_month,sys_day,sys_hour,sys_minute,sys_cecond; //通信状态
uint8_t back_type;               //反馈类型
uint8_t return_sign;              //反馈标志0-平台未反馈账户，1-平台已经反馈账户信息
uint8_t Order_number[4];           //订单号
uint32_t ChargingTime;           //充电时长，单位秒s
uint32_t ChargingBeginTime;
extern uint32_t Cur_0_BeginTime,Cur_0_Time;
extern uint8_t MeterCommErr;
extern uint8_t LoginPermission;       //登录许可
extern uint8_t ChargingPermission;       //充电许可
extern uint8_t StopRequest;            //后台停止请求
extern uint8_t StopPermission;       //停止许可
uint8_t RelaySta232;      //232接受状态指示灯，交替开关
extern uint8_t linkv;                  //连接器检测电压







//******************************************************************************************************CRC LRC校验程序

#define  Hi  0                              //用于选择CRC函数输出的高低位
#define  Lo  1


static const uint8_t  auchCRCHi[]=			// CRC值的高字节列表
{
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
0x40
};

static const uint8_t  auchCRCLo[] =			// CRC值的低字节列表
{
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
0x40
};


uint8_t CRC16( uint8_t * puchMsg,short usDataLen,uint8_t byte_flag)        // 得到CRC的高字节 (byte_flag == 1)
{															         // 低字节（byte_flag == 0）
  uint8_t uchCRCHi=0xFF;
  uint8_t uchCRCLo=0xFF;
  uint8_t uIndex;

  while ( usDataLen-- )
  {
    uIndex = uchCRCHi ^ * puchMsg++;
	uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex];
	uchCRCLo = auchCRCLo[uIndex];
  }

  if(byte_flag)
  {
    return(uchCRCHi);
  }
  else
  {
    return(uchCRCLo);
  }
}

//******************************************************************************************************CRC LRC校验程序






/*************************************************************
Function: uint32_t Heartbeat ( void )
Description: 心跳
Calls:       无
Called By:   
Input:       
Output:      无
Return:      
Others:      无
*************************************************************/
void Heartbeat ( void )
{
    uint8_t i, tmp;
  
    RS232Tx.Buff[0] = 0x68 ;    //起始符
    RS232Tx.Buff[1] = 0x01 ;    //版本
    RS232Tx.Buff[2] = Heartbeat_Function_code ; //功能码
    RS232Tx.Buff[3] = g_sParaConfig.id[0] ;        //设备编号     
    RS232Tx.Buff[4] = g_sParaConfig.id[1] ;        //设备编号
    RS232Tx.Buff[5] = g_sParaConfig.id[2] ;        //设备编号
    RS232Tx.Buff[6] = g_sParaConfig.id[3] ;        //设备编号
    RS232Tx.Buff[7] = 0 ;        //包号
    RS232Tx.Buff[8] = 0 ;        //
    RS232Tx.Buff[9] = Len_Heartbeat ;        //
    RS232Tx.Buff[10] = Dev_Status ;        //
    RS232Tx.Buff[11] = Dev_Error ;        //
    tmp = 0; 
    for ( i = 0; i < Len_Heartbeat; i++ )
    {
        tmp += RS232Tx.Buff[10+i]; 
    }
    RS232Tx.Buff[Len_Heartbeat + 10] = tmp ;        //
    RS232Tx.Len = Len_Heartbeat + 11 ;//给发送长度
    RS232SendMsg(); 
}

/*************************************************************
Function: uint32_t Account_Verification ( void )
Description: 身份验证--手机号和密码
Calls:       无
Called By:   
Input:       
Output:      无
Return:      
Others:      无
*************************************************************/
void Account_Verification ( void )
{
    uint8_t i, tmp;
  
    RS232Tx.Buff[0] = 0x68 ;    //起始符
    RS232Tx.Buff[1] = 0x01 ;    //版本
    RS232Tx.Buff[2] = Account_Verification_Function_code ; //功能码
    RS232Tx.Buff[3] = g_sParaConfig.id[0] ;        //设备编号     
    RS232Tx.Buff[4] = g_sParaConfig.id[1] ;        //设备编号
    RS232Tx.Buff[5] = g_sParaConfig.id[2] ;        //设备编号
    RS232Tx.Buff[6] = g_sParaConfig.id[3] ;        //设备编号
    RS232Tx.Buff[7] = 0 ;        //包号
    RS232Tx.Buff[8] = 0 ;        //
    RS232Tx.Buff[9] = Len_Account_Verification ;        //
    memcpy(&RS232Tx.Buff[10],t_user_info.tel_number,12);
    memcpy(&RS232Tx.Buff[22],t_user_info.password,6);
    tmp = 0; 
    for ( i = 0; i < Len_Account_Verification; i++ )
    {
        tmp += RS232Tx.Buff[10+i]; 
    }
    RS232Tx.Buff[Len_Account_Verification+10] = tmp ;        //
    RS232Tx.Len = Len_Account_Verification + 11 ;//给发送长度
    RS232SendMsg(); 
}

/*************************************************************
Function: uint32_t QR_code_Verification ( void )
Description: 身份验证---二维码扫描
Calls:       无
Called By:   
Input:       
Output:      无
Return:      
Others:      无
*************************************************************/
void QR_code_Verification ( void )
{
    RS232Tx.Buff[0] = 0x68 ;    //起始符
    RS232Tx.Buff[1] = 0x01 ;    //版本
    RS232Tx.Buff[2] = QR_code_Verification_Function_code ; //功能码
    RS232Tx.Buff[3] = g_sParaConfig.id[0] ;        //设备编号     
    RS232Tx.Buff[4] = g_sParaConfig.id[1] ;        //设备编号
    RS232Tx.Buff[5] = g_sParaConfig.id[2] ;        //设备编号
    RS232Tx.Buff[6] = g_sParaConfig.id[3] ;        //设备编号
    RS232Tx.Buff[7] = 0 ;        //包号
    RS232Tx.Buff[8] = 0 ;        //
    RS232Tx.Buff[9] = Len_QR_code_Verification ;        //
    RS232Tx.Buff[10] = 0 ;        //
    RS232Tx.Len = 11 ;//给发送长度
    RS232SendMsg(); 
}

/*************************************************************
Function: uint32_t Card_Verification ( void )
Description: 身份验证---卡
Calls:       无
Called By:   
Input:       
Output:      无
Return:      
Others:      无
*************************************************************/
void Card_Verification ( void )
{
    uint8_t i, tmp;
  
    RS232Tx.Buff[0] = 0x68 ;    //起始符
    RS232Tx.Buff[1] = 0x01 ;    //版本
    RS232Tx.Buff[2] = Card_Verification_Function_code ; //功能码
    RS232Tx.Buff[3] = g_sParaConfig.id[0] ;        //设备编号     
    RS232Tx.Buff[4] = g_sParaConfig.id[1] ;        //设备编号
    RS232Tx.Buff[5] = g_sParaConfig.id[2] ;        //设备编号
    RS232Tx.Buff[6] = g_sParaConfig.id[3] ;        //设备编号
    RS232Tx.Buff[7] = 0 ;        //包号
    RS232Tx.Buff[8] = 0 ;        //
    RS232Tx.Buff[9] = Len_Card_Verification ;        //
    memcpy(&RS232Tx.Buff[10],t_user_info.card_number,16);
    memcpy(&RS232Tx.Buff[26],t_user_info.password,6);
    tmp = 0; 
    for ( i = 0; i < Len_Card_Verification; i++ )
    {
        tmp += RS232Tx.Buff[10+i]; 
    }
    RS232Tx.Buff[Len_Card_Verification+10] = tmp ;        //
    RS232Tx.Len = Len_Card_Verification + 11 ;//给发送长度
    RS232SendMsg(); 
}

/*************************************************************
Function: uint32_t Start ( void )
Description: 启动充电请求
Calls:       无
Called By:   
Input:       
Output:      无
Return:      
Others:      无
*************************************************************/
void Start ( void )
{
    uint8_t i, tmp;
  
    RS232Tx.Buff[0] = 0x68 ;    //起始符
    RS232Tx.Buff[1] = 0x01 ;    //版本
    RS232Tx.Buff[2] = Start_Function_code ; //功能码
    RS232Tx.Buff[3] = g_sParaConfig.id[0] ;        //设备编号     
    RS232Tx.Buff[4] = g_sParaConfig.id[1] ;        //设备编号
    RS232Tx.Buff[5] = g_sParaConfig.id[2] ;        //设备编号
    RS232Tx.Buff[6] = g_sParaConfig.id[3] ;        //设备编号
    RS232Tx.Buff[7] = 0 ;        //包号
    RS232Tx.Buff[8] = 0 ;        //
    RS232Tx.Buff[9] = Len_Start ;        //
    memcpy(&RS232Tx.Buff[10],r_user_info.tel_number,12);
    RS232Tx.Buff[22] = ( begin_CurKwh >> 24 ) & 0xff;
    RS232Tx.Buff[23] = ( begin_CurKwh >> 16 ) & 0xff;
    RS232Tx.Buff[24] = ( begin_CurKwh >> 8 ) & 0xff ;
    RS232Tx.Buff[25] = ( begin_CurKwh ) & 0xff ;
    tmp = 0; 
    for ( i = 0; i < Len_Start; i++ )
    {
        tmp += RS232Tx.Buff[10+i]; 
    }
    RS232Tx.Buff[Len_Start+10] = tmp ;        //
    RS232Tx.Len = Len_Start + 11 ;//给发送长度
    RS232SendMsg(); 
}

/*************************************************************
Function: uint32_t Stop ( void )
Description: 停止充电请求
Calls:       无
Called By:   
Input:       
Output:      无
Return:      
Others:      无
*************************************************************/
void Stop ( void )
{
    uint8_t i, tmp;
  
    RS232Tx.Buff[0] = 0x68 ;    //起始符
    RS232Tx.Buff[1] = 0x01 ;    //版本
    RS232Tx.Buff[2] = Stop_Function_code ; //功能码
    RS232Tx.Buff[3] = g_sParaConfig.id[0] ;        //设备编号     
    RS232Tx.Buff[4] = g_sParaConfig.id[1] ;        //设备编号
    RS232Tx.Buff[5] = g_sParaConfig.id[2] ;        //设备编号
    RS232Tx.Buff[6] = g_sParaConfig.id[3] ;        //设备编号
    RS232Tx.Buff[7] = 0 ;        //包号
    RS232Tx.Buff[8] = 0 ;        //
    RS232Tx.Buff[9] = Len_Stop ;        //
    RS232Tx.Buff[10] = Order_number[0];
    RS232Tx.Buff[11] = Order_number[1];
    RS232Tx.Buff[12] = Order_number[2];
    RS232Tx.Buff[13] = Order_number[3];
    RS232Tx.Buff[14] = ( end_CurKwh >> 24 ) & 0xff;
    RS232Tx.Buff[15] = ( end_CurKwh >> 16 ) & 0xff;
    RS232Tx.Buff[16] = ( end_CurKwh >> 8 ) & 0xff ;
    RS232Tx.Buff[17] = ( end_CurKwh ) & 0xff ;
    tmp = 0; 
    for ( i = 0; i < Len_Stop; i++ )
    {
        tmp += RS232Tx.Buff[10+i]; 
    }
    RS232Tx.Buff[Len_Stop+10] = tmp ;        //
    RS232Tx.Len = Len_Stop + 11 ;//给发送长度
    RS232SendMsg(); 
}

/*************************************************************
Function: uint32_t AC_Info ( void )
Description: 交流信息上传
Calls:       无
Called By:   
Input:       
Output:      无
Return:      
Others:      无
*************************************************************/
void AC_Info ( void )
{
    uint8_t i, tmp;
  
    RS232Tx.Buff[0] = 0x68 ;    //起始符
    RS232Tx.Buff[1] = 0x01 ;    //版本
    RS232Tx.Buff[2] = AC_Info_Function_code ; //功能码
    RS232Tx.Buff[3] = g_sParaConfig.id[0] ;        //设备编号     
    RS232Tx.Buff[4] = g_sParaConfig.id[1] ;        //设备编号
    RS232Tx.Buff[5] = g_sParaConfig.id[2] ;        //设备编号
    RS232Tx.Buff[6] = g_sParaConfig.id[3] ;        //设备编号
    RS232Tx.Buff[7] = 0 ;        //包号
    RS232Tx.Buff[8] = 0 ;        //
    RS232Tx.Buff[9] = Len_AC_Info ;        //
    RS232Tx.Buff[10] = Order_number[0];
    RS232Tx.Buff[11] = Order_number[1];
    RS232Tx.Buff[12] = Order_number[2];
    RS232Tx.Buff[13] = Order_number[3];
    RS232Tx.Buff[14] = ( output_vol >> 8) & 0xff;
    RS232Tx.Buff[15] = output_vol & 0xff;
    RS232Tx.Buff[16] = ( output_cur >> 8) & 0xff;
    RS232Tx.Buff[17] = output_cur & 0xff;
    RS232Tx.Buff[18] = ( CurKwh >> 24 ) & 0xff ;
    RS232Tx.Buff[19] = ( CurKwh >> 16 ) & 0xff ;
    RS232Tx.Buff[20] = ( CurKwh >> 8 ) & 0xff ; 
    RS232Tx.Buff[21] = ( CurKwh ) & 0xff ;
    tmp = 0; 
    for ( i = 0; i < Len_AC_Info; i++ )
    {
        tmp += RS232Tx.Buff[10+i]; 
    }
    RS232Tx.Buff[Len_AC_Info+10] = tmp ;        //
    RS232Tx.Len = Len_AC_Info + 11 ;//给发送长度
    RS232SendMsg(); 
}

/*************************************************************
Function: uint32_t DC_Info ( void )
Description: 直流信息上传
Calls:       无
Called By:   
Input:       
Output:      无
Return:      
Others:      无
*************************************************************/
void DC_Info ( void )
{
    uint8_t i, tmp;
  
    RS232Tx.Buff[0] = 0x68 ;    //起始符
    RS232Tx.Buff[1] = 0x01 ;    //版本
    RS232Tx.Buff[2] = DC_Info_Function_code ; //功能码
    RS232Tx.Buff[3] = g_sParaConfig.id[0] ;        //设备编号     
    RS232Tx.Buff[4] = g_sParaConfig.id[1] ;        //设备编号
    RS232Tx.Buff[5] = g_sParaConfig.id[2] ;        //设备编号
    RS232Tx.Buff[6] = g_sParaConfig.id[3] ;        //设备编号
    RS232Tx.Buff[7] = 0 ;        //包号
    RS232Tx.Buff[8] = 0 ;        //
    RS232Tx.Buff[9] = Len_DC_Info ;        //
    RS232Tx.Buff[10] = Order_number[0];
    RS232Tx.Buff[11] = Order_number[1];
    RS232Tx.Buff[12] = Order_number[2];
    RS232Tx.Buff[13] = Order_number[3];
    RS232Tx.Buff[14] = SOC;
    RS232Tx.Buff[15] = ( output_vol >> 8) & 0xff;
    RS232Tx.Buff[16] = output_vol & 0xff;
    RS232Tx.Buff[17] = ( output_cur >> 8) & 0xff;
    RS232Tx.Buff[18] = output_cur & 0xff;
    RS232Tx.Buff[19] = ( CurKwh >> 24 ) & 0xff ;
    RS232Tx.Buff[20] = ( CurKwh >> 16 ) & 0xff ;
    RS232Tx.Buff[21] = ( CurKwh >> 8 ) & 0xff ; 
    RS232Tx.Buff[22] = ( CurKwh ) & 0xff ;
    tmp = 0; 
    for ( i = 0; i < Len_DC_Info; i++ )
    {
        tmp += RS232Tx.Buff[10+i]; 
    }
    RS232Tx.Buff[Len_DC_Info+10] = tmp ;        //
    RS232Tx.Len = Len_DC_Info + 11 ;//给发送长度
    RS232SendMsg(); 
}

/*************************************************************
Function: uint32_t calibration_time ( void )
Description: 校时
Calls:       无
Called By:   
Input:       
Output:      无
Return:      
Others:      无
*************************************************************/
void calibration_time ( void )
{
    RS232Tx.Buff[0] = 0x68 ;    //起始符
    RS232Tx.Buff[1] = 0x01 ;    //版本
    RS232Tx.Buff[2] = calibration_time_Function_code ; //功能码
    RS232Tx.Buff[3] = g_sParaConfig.id[0] ;        //设备编号     
    RS232Tx.Buff[4] = g_sParaConfig.id[1] ;        //设备编号
    RS232Tx.Buff[5] = g_sParaConfig.id[2] ;        //设备编号
    RS232Tx.Buff[6] = g_sParaConfig.id[3] ;        //设备编号
    RS232Tx.Buff[7] = 0 ;        //包号
    RS232Tx.Buff[8] = 0 ;        //
    RS232Tx.Buff[9] = Len_calibration_time ;        //
    RS232Tx.Buff[10] = 0 ;        //
    RS232Tx.Len = 11 ;//给发送长度
    RS232SendMsg(); 
}

/*************************************************************
Function: uint32_t record_clear ( void )
Description: 清除后台二维码扫描记录
Calls:       无
Called By:   
Input:       
Output:      无
Return:      
Others:      无
*************************************************************/
void record_clear ( void )
{
    RS232Tx.Buff[0] = 0x68 ;    //起始符
    RS232Tx.Buff[1] = 0x01 ;    //版本
    RS232Tx.Buff[2] = 0x0b ; //功能码
    RS232Tx.Buff[3] = g_sParaConfig.id[0] ;        //设备编号     
    RS232Tx.Buff[4] = g_sParaConfig.id[1] ;        //设备编号
    RS232Tx.Buff[5] = g_sParaConfig.id[2] ;        //设备编号
    RS232Tx.Buff[6] = g_sParaConfig.id[3] ;        //设备编号
    RS232Tx.Buff[7] = 0 ;        //包号
    RS232Tx.Buff[8] = 0 ;        //
    RS232Tx.Buff[9] = Len_calibration_time ;        //
    RS232Tx.Buff[10] = 0 ;        //
    RS232Tx.Len = 11 ;//给发送长度
    RS232SendMsg(); 
}

void GPRS_main ( void )
{
    uint8_t i, len;
    uint8_t sum_check;
    uint16_t data_len;
    uint8_t tmp;
      
    uint16_t *data;
    uint8_t crcl, crch;
    uint8_t temp;
    uint16_t addr = 0;
    uint16_t temp_;
    
    if(( SysTickCnt - HeartbeatCnt ) > 27000)
    {
        Heartbeat();
        HeartbeatCnt = SysTickCnt;
    } 
    
    if (Dev_Status == 1)
    {
        ChargingTime = (SysTickCnt - ChargingBeginTime)/1000 ;
        if(( SysTickCnt - InfoCnt ) > 17000)
        {
            AC_Info();
            InfoCnt = SysTickCnt;
        } 
        Cur_0_Time = (SysTickCnt - Cur_0_BeginTime)/1000;     
        if ((Cur_0_Time > 180)||                //180s检测不到有效电流则认为充电已经停止
            (linkv != 6)||   //充电过程中如果检测枪断开则停止充电
            (MeterCommErr == 1)||               //电表通信故障
            (output_cur > 3500)||               //电流软保护，当输出电流大于35A时停止充电
            (output_vol > 25300)||(output_vol < 18700))           //电压软保护，当输入电压超出253V或者低于187V时充电机停止输出
        {
            end_CurKwh = CurKwh;
 //           ClrOutput(1);           //停止输出
            OUTPUTCLOSE;
            ClrOutput(2);           //关闭运行指示灯
            Dev_Status = 0;
            Stop();
        }
        
    }
    
    if ( GetRs232Sta() == 1 ) //帧接收结束标记
    {
        //接收状态指示灯
        RelaySta232 = ~ RelaySta232 ;
        tmp = RelaySta232;
        if ( tmp & 0x1 )
        {
            SetOutput ( LED1 );
        }
        else
        {
            ClrOutput ( LED1 );
        }
        //
        len = RS232Rx.Len ;
        RS232Rx.Flag = 0 ;
        RS232Rx.Len = 0;
        RS232Rx.Idx = 0 ;
        
 //////////////////////////////////////////////////////////////////////////////////////////////////       
        
     
        if ( RS232Rx.Buff[0] == 1)//先判断是否本机地址
        {
    //        Chip_CRC_Init();
            //  result 高8位对应MODBUS CRC L ，低8位对应MODBUS CRC H
    //        data = ( uint16_t * )RS232Rx.Buff;
    //        temp_ = Chip_CRC_CRC16 ( data, len - 2 ); //计算CRC
    //        crcl = temp_ ;
    //        crch = temp_ >> 8 ;
          
          crch = CRC16(RS232Rx.Buff,(len - 2),Hi);
          crcl = CRC16(RS232Rx.Buff,(len - 2),Lo);
          

            if ( ( crcl == RS232Rx.Buff[len-2] ) && ( crch == RS232Rx.Buff[len-1] ) ) //比较CRC
            {
                switch ( RS232Rx.Buff[1] ) //功能码
                {
                    case 0x03:// 从主站接收到的：地址 03 地址高 地址低 寄存器数量高 寄存器数量低 CRCL CRCH
                        // 发送给主站的：地址 03 字节长度 数据1 数据2 数据N CRCL CRCH
                    {
                        RS232Tx.Buff[0] = RS232Rx.Buff[0] ;//地址
                        RS232Tx.Buff[1] = RS232Rx.Buff[1] ;//03功能码

                        temp = RS232Rx.Buff[4] ;
                        temp <<= 8 ;
                        temp |= RS232Rx.Buff[5] ;//temp中为主站要求的长度
                        temp *= 2 ;              //1个寄存器为2字节，所以长度X2
                        RS232Tx.Buff[2] = temp ;//长度
                        len = temp ;
                        addr = * ( ( uint16_t * ) ( &RS232Rx.Buff[2] ) );
                        addr =  SWAP ( addr ) ;
                        
                        switch(addr)
                        {
                            case 0x64:
                            {
                                LoadParameter();
                                RS232Tx.Buff[3] = g_sParaConfig.id[0];
                                RS232Tx.Buff[4] = g_sParaConfig.id[1];
                                RS232Tx.Buff[5] = g_sParaConfig.id[2];
                                RS232Tx.Buff[6] = g_sParaConfig.id[3];
                                break;
                            }
                        }

                        temp += 3 ;//数据区长度 + 帧头
                //        Chip_CRC_Init ();
                //        data = ( uint16_t * )RS232Rx.Buff;
                 //       temp_ = Chip_CRC_CRC16 ( data, temp );
                //        crcl = temp_ ;
                //        crch = temp_ >> 8 ;
                        
                        crch = CRC16(RS232Tx.Buff,(temp),Hi);
                        crcl = CRC16(RS232Tx.Buff,(temp),Lo);
          
                        RS232Tx.Buff[temp] = crcl;
                        RS232Tx.Buff[temp+1] = crch;
                        RS232Tx.Len = temp + 2 ; //给发送长度
    
                        
               //       RS485Ch1SendMsg();
                        RS232SendMsg(); 
    
                        break;
                    }
                    case 0x10:// 从主站接收到的：地址 0x10 地址高 地址低 寄存器数量高 寄存器数量低 字节数 数据1  数据2 数据N CRCL CRCH
                    {
                    
                        // 发送给主站的：地址 0x10 地址高 地址低 寄存器数量高 寄存器数量低 CRCL CRCH
                        RS232Tx.Buff[0] = RS232Rx.Buff[0] ;//地址
                        RS232Tx.Buff[1] = RS232Rx.Buff[1] ;//01功能码
                        RS232Tx.Buff[2] = RS232Rx.Buff[2] ;//
                        RS232Tx.Buff[3] = RS232Rx.Buff[3] ;//
                        RS232Tx.Buff[4] = RS232Rx.Buff[4] ;//
                        RS232Tx.Buff[5] = RS232Rx.Buff[5] ;//

              //          Chip_CRC_Init ();
              //          data = ( uint16_t * )RS232Rx.Buff;
              //          temp_ = Chip_CRC_CRC16 ( data, 6 );
              //          crcl = temp_ ;
               //         crch = temp_ >> 8 ;
                        
                         crch = CRC16(RS232Tx.Buff,6,Hi);
                         crcl = CRC16(RS232Tx.Buff,6,Lo);
                        
                        
                        RS232Tx.Buff[6] = crcl;
                        RS232Tx.Buff[7] = crch;

                        RS232Tx.Len = 8 ;//给发送长度
    
                        
              //          RS485Ch1SendMsg(); //先发送回应给主站，避免数据处理时间过长导致通信错误
                        RS232SendMsg(); 
    

                        temp = RS232Tx.Buff[4] ;
                        temp <<= 8 ;
                        temp |= RS232Tx.Buff[5] ;//temp中为主站要求的长度
                        temp *= 2 ;             //1个寄存器为2字节，所以长度X2
                        RS232Rx.Buff[2] = temp;//长度
                        len = temp ;//取长度
                        addr = * ( ( uint16_t * ) ( &RS232Tx.Buff[2] ) );
                        addr =  SWAP ( addr ) ; //取地址
                        i = 7;
                        
                        switch(addr)
                        {
                            case 0x64:
                            {
                                g_sParaConfig.id[0] = RS232Rx.Buff[7];
                                g_sParaConfig.id[1] = RS232Rx.Buff[8];
                                g_sParaConfig.id[2] = RS232Rx.Buff[9];
                                g_sParaConfig.id[3] = RS232Rx.Buff[10];
                                SaveParameter();
                                break;
                            }
                        }

                    }

                }
                return;
            }
            else
            {
                return;
            }
        }       
                
 //////////////////////////////////////////////////////////////////////////////////////////////////       
        
          
    else if( RS232Rx.Buff[0] == 0x68 )
        {
            data_len = ( RS232Rx.Buff[9] << 8 ) + RS232Rx.Buff[10];
            if( len == ( data_len + 12 ) )
            {
                sum_check = 0;
                for ( i = 0; i < data_len; i++ )
                {
                    sum_check += RS232Rx.Buff[11+i]; 
                }
                if( sum_check == RS232Rx.Buff[11+data_len])
                {
                    switch ( RS232Rx.Buff[2] )
                    {
                    case 0x01:
                        {
                            communication_state = 1;
                            communication_delay = 0;
                            break;
                        }
                     case 0x02:
                        {
                            communication_state = 1;
                            return_sign = 1;
                            back_type = RS232Rx.Buff[7];
                            memcpy(r_user_info.tel_number,&RS232Rx.Buff[11],12);
                            r_user_info.Balance = 0;
                            r_user_info.Balance = RS232Rx.Buff[23];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[24];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[25];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[26];
                            break;
                        }
                     case 0x03:
                        {
                            LoginPermission = 1;
                            memcpy(r_user_info.tel_number,&RS232Rx.Buff[11],12);
                            r_user_info.Balance = 0;
                            r_user_info.Balance = RS232Rx.Buff[23];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[24];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[25];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[26];
                            break;
                        }
                     case 0x04:
                        {
                            if (RS232Rx.Buff[7] == 0)
                            {
                                Order_number[0] = RS232Rx.Buff[11];
                                Order_number[1] = RS232Rx.Buff[12];
                                Order_number[2] = RS232Rx.Buff[13];
                                Order_number[3] = RS232Rx.Buff[14];
                                
                                ChargingPermission = 1;
                                
                                r_user_info.Balance = 0;
                                r_user_info.Balance = RS232Rx.Buff[15];
                                r_user_info.Balance <<= 8;
                                r_user_info.Balance |= RS232Rx.Buff[16];
                                r_user_info.Balance <<= 8;
                                r_user_info.Balance |= RS232Rx.Buff[17];
                                r_user_info.Balance <<= 8;
                                r_user_info.Balance |= RS232Rx.Buff[18];
                            }
                            break;
                        }
                     case 0x05:
                        {
                            StopPermission = 1;
                            r_user_info.Balance = 0;
                            r_user_info.Balance = RS232Rx.Buff[11];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[12];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[13];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[14];
                            r_user_info.pay = 0;
                            r_user_info.pay = RS232Rx.Buff[15];
                            r_user_info.pay <<= 8;
                            r_user_info.pay |= RS232Rx.Buff[16];
                            r_user_info.pay <<= 8;
                            r_user_info.pay |= RS232Rx.Buff[17];
                            r_user_info.pay <<= 8;
                            r_user_info.pay |= RS232Rx.Buff[18];
                            break;
                        }
                     case 0x06:
                        {
                            r_user_info.pay = 0;
                            r_user_info.pay = RS232Rx.Buff[11];
                            r_user_info.pay <<= 8;
                            r_user_info.pay |= RS232Rx.Buff[12];
                            r_user_info.pay <<= 8;
                            r_user_info.pay |= RS232Rx.Buff[13];
                            r_user_info.pay <<= 8;
                            r_user_info.pay |= RS232Rx.Buff[14];
                            communication_state = 1;
                            if(RS232Rx.Buff[7] == 0x03 )
                            {
  //                              ClrOutput(1);           //停止输出
                                OUTPUTCLOSE;
                                ClrOutput(2);           //关闭运行指示灯
                                Stop();
                            }
                            break;
                        }
                     case 0x07:
                        {
                            r_user_info.pay = 0;
                            r_user_info.pay = RS232Rx.Buff[11];
                            r_user_info.pay <<= 8;
                            r_user_info.pay |= RS232Rx.Buff[12];
                            r_user_info.pay <<= 8;
                            r_user_info.pay |= RS232Rx.Buff[13];
                            r_user_info.pay <<= 8;
                            r_user_info.pay |= RS232Rx.Buff[14];
                            communication_state = 1;
                            if(RS232Rx.Buff[7] == 0x03 )
                            {
    //                            ClrOutput(1);           //停止输出
                                OUTPUTCLOSE;
                                ClrOutput(2);           //关闭运行指示灯
                                Stop();
                            }
                            break;
                        }
                     case 0x08:
                        {
                            StopRequest = 1;
                            end_CurKwh = CurKwh;
                            Dev_Status = 0;
                            return_sign = 0;
                            communication_state = 1;
                       //     ClrOutput(1);           //停止输出
                            OUTPUTCLOSE;
                            ClrOutput(2);           //关闭运行指示灯
                            server_stop = 1;
                            Stop();
                            break;
                        }
                     case 0x09:
                        {
                            communication_state = 1;
                            memcpy(t_user_info.card_number,&RS232Rx.Buff[11],16);
                            r_user_info.Balance = 0;
                            r_user_info.Balance = RS232Rx.Buff[27];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[28];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[29];
                            r_user_info.Balance <<= 8;
                            r_user_info.Balance |= RS232Rx.Buff[30];
                            r_user_info.card_status = RS232Rx.Buff[31];
                            break;
                        }
                     case 0x0a:
                        {
                            communication_state = 1;
                            sys_year = RS232Rx.Buff[11];
                            sys_month = RS232Rx.Buff[12];
                            sys_day = RS232Rx.Buff[13];
                            sys_hour = RS232Rx.Buff[14];
                            sys_minute = RS232Rx.Buff[15];
                            sys_cecond = RS232Rx.Buff[16];
                            break;
                        } 
                    }
                }
                else
                {
                    return;
                }
            }
            else
            {
                return;
            }
        }
        else
        {
            return;
        }
    }
}